/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.epsmart.wzdp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqParameter implements org.apache.thrift.TBase<ReqParameter, ReqParameter._Fields>, java.io.Serializable, Cloneable, Comparable<ReqParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqParameter");

  private static final org.apache.thrift.protocol.TField BIZ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bizId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLUGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pluginId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REQ_PAR_XML_FIELD_DESC = new org.apache.thrift.protocol.TField("reqParXml", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqParameterTupleSchemeFactory());
  }

  public int bizId; // required
  public long pluginId; // required
  public long userName; // required
  public String methodName; // required
  public String reqParXml; // required
  public int pageNo; // required
  public int pageSize; // required
  public String password; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIZ_ID((short)1, "bizId"),
    PLUGIN_ID((short)2, "pluginId"),
    USER_NAME((short)3, "userName"),
    METHOD_NAME((short)4, "methodName"),
    REQ_PAR_XML((short)5, "reqParXml"),
    PAGE_NO((short)6, "pageNo"),
    PAGE_SIZE((short)7, "pageSize"),
    PASSWORD((short)8, "password");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIZ_ID
          return BIZ_ID;
        case 2: // PLUGIN_ID
          return PLUGIN_ID;
        case 3: // USER_NAME
          return USER_NAME;
        case 4: // METHOD_NAME
          return METHOD_NAME;
        case 5: // REQ_PAR_XML
          return REQ_PAR_XML;
        case 6: // PAGE_NO
          return PAGE_NO;
        case 7: // PAGE_SIZE
          return PAGE_SIZE;
        case 8: // PASSWORD
          return PASSWORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIZID_ISSET_ID = 0;
  private static final int __PLUGINID_ISSET_ID = 1;
  private static final int __USERNAME_ISSET_ID = 2;
  private static final int __PAGENO_ISSET_ID = 3;
  private static final int __PAGESIZE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIZ_ID, new org.apache.thrift.meta_data.FieldMetaData("bizId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLUGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("pluginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_PAR_XML, new org.apache.thrift.meta_data.FieldMetaData("reqParXml", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqParameter.class, metaDataMap);
  }

  public ReqParameter() {
  }

  public ReqParameter(
    int bizId,
    long pluginId,
    long userName,
    String methodName,
    String reqParXml,
    int pageNo,
    int pageSize,
    String password)
  {
    this();
    this.bizId = bizId;
    setBizIdIsSet(true);
    this.pluginId = pluginId;
    setPluginIdIsSet(true);
    this.userName = userName;
    setUserNameIsSet(true);
    this.methodName = methodName;
    this.reqParXml = reqParXml;
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.password = password;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqParameter(ReqParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bizId = other.bizId;
    this.pluginId = other.pluginId;
    this.userName = other.userName;
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetReqParXml()) {
      this.reqParXml = other.reqParXml;
    }
    this.pageNo = other.pageNo;
    this.pageSize = other.pageSize;
    if (other.isSetPassword()) {
      this.password = other.password;
    }
  }

  public ReqParameter deepCopy() {
    return new ReqParameter(this);
  }

  @Override
  public void clear() {
    setBizIdIsSet(false);
    this.bizId = 0;
    setPluginIdIsSet(false);
    this.pluginId = 0;
    setUserNameIsSet(false);
    this.userName = 0;
    this.methodName = null;
    this.reqParXml = null;
    setPageNoIsSet(false);
    this.pageNo = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    this.password = null;
  }

  public int getBizId() {
    return this.bizId;
  }

  public ReqParameter setBizId(int bizId) {
    this.bizId = bizId;
    setBizIdIsSet(true);
    return this;
  }

  public void unsetBizId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZID_ISSET_ID);
  }

  /** Returns true if field bizId is set (has been assigned a value) and false otherwise */
  public boolean isSetBizId() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZID_ISSET_ID);
  }

  public void setBizIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZID_ISSET_ID, value);
  }

  public long getPluginId() {
    return this.pluginId;
  }

  public ReqParameter setPluginId(long pluginId) {
    this.pluginId = pluginId;
    setPluginIdIsSet(true);
    return this;
  }

  public void unsetPluginId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLUGINID_ISSET_ID);
  }

  /** Returns true if field pluginId is set (has been assigned a value) and false otherwise */
  public boolean isSetPluginId() {
    return EncodingUtils.testBit(__isset_bitfield, __PLUGINID_ISSET_ID);
  }

  public void setPluginIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLUGINID_ISSET_ID, value);
  }

  public long getUserName() {
    return this.userName;
  }

  public ReqParameter setUserName(long userName) {
    this.userName = userName;
    setUserNameIsSet(true);
    return this;
  }

  public void unsetUserName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERNAME_ISSET_ID);
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return EncodingUtils.testBit(__isset_bitfield, __USERNAME_ISSET_ID);
  }

  public void setUserNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERNAME_ISSET_ID, value);
  }

  public String getMethodName() {
    return this.methodName;
  }

  public ReqParameter setMethodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public String getReqParXml() {
    return this.reqParXml;
  }

  public ReqParameter setReqParXml(String reqParXml) {
    this.reqParXml = reqParXml;
    return this;
  }

  public void unsetReqParXml() {
    this.reqParXml = null;
  }

  /** Returns true if field reqParXml is set (has been assigned a value) and false otherwise */
  public boolean isSetReqParXml() {
    return this.reqParXml != null;
  }

  public void setReqParXmlIsSet(boolean value) {
    if (!value) {
      this.reqParXml = null;
    }
  }

  public int getPageNo() {
    return this.pageNo;
  }

  public ReqParameter setPageNo(int pageNo) {
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    return this;
  }

  public void unsetPageNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNo() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  public void setPageNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public ReqParameter setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public String getPassword() {
    return this.password;
  }

  public ReqParameter setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BIZ_ID:
      if (value == null) {
        unsetBizId();
      } else {
        setBizId((Integer)value);
      }
      break;

    case PLUGIN_ID:
      if (value == null) {
        unsetPluginId();
      } else {
        setPluginId((Long)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((Long)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((String)value);
      }
      break;

    case REQ_PAR_XML:
      if (value == null) {
        unsetReqParXml();
      } else {
        setReqParXml((String)value);
      }
      break;

    case PAGE_NO:
      if (value == null) {
        unsetPageNo();
      } else {
        setPageNo((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIZ_ID:
      return Integer.valueOf(getBizId());

    case PLUGIN_ID:
      return Long.valueOf(getPluginId());

    case USER_NAME:
      return Long.valueOf(getUserName());

    case METHOD_NAME:
      return getMethodName();

    case REQ_PAR_XML:
      return getReqParXml();

    case PAGE_NO:
      return Integer.valueOf(getPageNo());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case PASSWORD:
      return getPassword();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIZ_ID:
      return isSetBizId();
    case PLUGIN_ID:
      return isSetPluginId();
    case USER_NAME:
      return isSetUserName();
    case METHOD_NAME:
      return isSetMethodName();
    case REQ_PAR_XML:
      return isSetReqParXml();
    case PAGE_NO:
      return isSetPageNo();
    case PAGE_SIZE:
      return isSetPageSize();
    case PASSWORD:
      return isSetPassword();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqParameter)
      return this.equals((ReqParameter)that);
    return false;
  }

  public boolean equals(ReqParameter that) {
    if (that == null)
      return false;

    boolean this_present_bizId = true;
    boolean that_present_bizId = true;
    if (this_present_bizId || that_present_bizId) {
      if (!(this_present_bizId && that_present_bizId))
        return false;
      if (this.bizId != that.bizId)
        return false;
    }

    boolean this_present_pluginId = true;
    boolean that_present_pluginId = true;
    if (this_present_pluginId || that_present_pluginId) {
      if (!(this_present_pluginId && that_present_pluginId))
        return false;
      if (this.pluginId != that.pluginId)
        return false;
    }

    boolean this_present_userName = true;
    boolean that_present_userName = true;
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (this.userName != that.userName)
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_reqParXml = true && this.isSetReqParXml();
    boolean that_present_reqParXml = true && that.isSetReqParXml();
    if (this_present_reqParXml || that_present_reqParXml) {
      if (!(this_present_reqParXml && that_present_reqParXml))
        return false;
      if (!this.reqParXml.equals(that.reqParXml))
        return false;
    }

    boolean this_present_pageNo = true;
    boolean that_present_pageNo = true;
    if (this_present_pageNo || that_present_pageNo) {
      if (!(this_present_pageNo && that_present_pageNo))
        return false;
      if (this.pageNo != that.pageNo)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBizId()).compareTo(other.isSetBizId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizId, other.bizId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPluginId()).compareTo(other.isSetPluginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPluginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pluginId, other.pluginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqParXml()).compareTo(other.isSetReqParXml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqParXml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqParXml, other.reqParXml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqParameter(");
    boolean first = true;

    sb.append("bizId:");
    sb.append(this.bizId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pluginId:");
    sb.append(this.pluginId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    sb.append(this.userName);
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqParXml:");
    if (this.reqParXml == null) {
      sb.append("null");
    } else {
      sb.append(this.reqParXml);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNo:");
    sb.append(this.pageNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqParameterStandardSchemeFactory implements SchemeFactory {
    public ReqParameterStandardScheme getScheme() {
      return new ReqParameterStandardScheme();
    }
  }

  private static class ReqParameterStandardScheme extends StandardScheme<ReqParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIZ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizId = iprot.readI32();
              struct.setBizIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLUGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pluginId = iprot.readI64();
              struct.setPluginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userName = iprot.readI64();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQ_PAR_XML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqParXml = iprot.readString();
              struct.setReqParXmlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAGE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNo = iprot.readI32();
              struct.setPageNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BIZ_ID_FIELD_DESC);
      oprot.writeI32(struct.bizId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLUGIN_ID_FIELD_DESC);
      oprot.writeI64(struct.pluginId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeI64(struct.userName);
      oprot.writeFieldEnd();
      if (struct.methodName != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.methodName);
        oprot.writeFieldEnd();
      }
      if (struct.reqParXml != null) {
        oprot.writeFieldBegin(REQ_PAR_XML_FIELD_DESC);
        oprot.writeString(struct.reqParXml);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
      oprot.writeI32(struct.pageNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqParameterTupleSchemeFactory implements SchemeFactory {
    public ReqParameterTupleScheme getScheme() {
      return new ReqParameterTupleScheme();
    }
  }

  private static class ReqParameterTupleScheme extends TupleScheme<ReqParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBizId()) {
        optionals.set(0);
      }
      if (struct.isSetPluginId()) {
        optionals.set(1);
      }
      if (struct.isSetUserName()) {
        optionals.set(2);
      }
      if (struct.isSetMethodName()) {
        optionals.set(3);
      }
      if (struct.isSetReqParXml()) {
        optionals.set(4);
      }
      if (struct.isSetPageNo()) {
        optionals.set(5);
      }
      if (struct.isSetPageSize()) {
        optionals.set(6);
      }
      if (struct.isSetPassword()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBizId()) {
        oprot.writeI32(struct.bizId);
      }
      if (struct.isSetPluginId()) {
        oprot.writeI64(struct.pluginId);
      }
      if (struct.isSetUserName()) {
        oprot.writeI64(struct.userName);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetReqParXml()) {
        oprot.writeString(struct.reqParXml);
      }
      if (struct.isSetPageNo()) {
        oprot.writeI32(struct.pageNo);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.bizId = iprot.readI32();
        struct.setBizIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pluginId = iprot.readI64();
        struct.setPluginIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userName = iprot.readI64();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reqParXml = iprot.readString();
        struct.setReqParXmlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pageNo = iprot.readI32();
        struct.setPageNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }
  }

}

