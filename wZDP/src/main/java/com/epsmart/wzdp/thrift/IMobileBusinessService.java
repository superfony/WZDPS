/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.epsmart.wzdp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IMobileBusinessService {

  public interface Iface {

    public com.epsmart.wzdp.thrift.ResultBusinessData requestData(com.epsmart.wzdp.thrift.ReqParameter reqParameter) throws org.apache.thrift.TException;

    public com.epsmart.wzdp.thrift.ResultBizPlugin validateTerminalUser(int bizSysID, String terminalCode, String userName, String password) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void requestData(com.epsmart.wzdp.thrift.ReqParameter reqParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void validateTerminalUser(int bizSysID, String terminalCode, String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.epsmart.wzdp.thrift.ResultBusinessData requestData(com.epsmart.wzdp.thrift.ReqParameter reqParameter) throws org.apache.thrift.TException
    {
      send_requestData(reqParameter);
      return recv_requestData();
    }

    public void send_requestData(com.epsmart.wzdp.thrift.ReqParameter reqParameter) throws org.apache.thrift.TException
    {
      requestData_args args = new requestData_args();
      args.setReqParameter(reqParameter);
      sendBase("requestData", args);
    }

    public com.epsmart.wzdp.thrift.ResultBusinessData recv_requestData() throws org.apache.thrift.TException
    {
      requestData_result result = new requestData_result();
      receiveBase(result, "requestData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestData failed: unknown result");
    }

    public com.epsmart.wzdp.thrift.ResultBizPlugin validateTerminalUser(int bizSysID, String terminalCode, String userName, String password) throws org.apache.thrift.TException
    {
      send_validateTerminalUser(bizSysID, terminalCode, userName, password);
      return recv_validateTerminalUser();
    }

    public void send_validateTerminalUser(int bizSysID, String terminalCode, String userName, String password) throws org.apache.thrift.TException
    {
      validateTerminalUser_args args = new validateTerminalUser_args();
      args.setBizSysID(bizSysID);
      args.setTerminalCode(terminalCode);
      args.setUserName(userName);
      args.setPassword(password);
      sendBase("validateTerminalUser", args);
    }

    public com.epsmart.wzdp.thrift.ResultBizPlugin recv_validateTerminalUser() throws org.apache.thrift.TException
    {
      validateTerminalUser_result result = new validateTerminalUser_result();
      receiveBase(result, "validateTerminalUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateTerminalUser failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void requestData(com.epsmart.wzdp.thrift.ReqParameter reqParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestData_call method_call = new requestData_call(reqParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.epsmart.wzdp.thrift.ReqParameter reqParameter;
      public requestData_call(com.epsmart.wzdp.thrift.ReqParameter reqParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqParameter = reqParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestData_args args = new requestData_args();
        args.setReqParameter(reqParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.epsmart.wzdp.thrift.ResultBusinessData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestData();
      }
    }

    public void validateTerminalUser(int bizSysID, String terminalCode, String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateTerminalUser_call method_call = new validateTerminalUser_call(bizSysID, terminalCode, userName, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateTerminalUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int bizSysID;
      private String terminalCode;
      private String userName;
      private String password;
      public validateTerminalUser_call(int bizSysID, String terminalCode, String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizSysID = bizSysID;
        this.terminalCode = terminalCode;
        this.userName = userName;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateTerminalUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateTerminalUser_args args = new validateTerminalUser_args();
        args.setBizSysID(bizSysID);
        args.setTerminalCode(terminalCode);
        args.setUserName(userName);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.epsmart.wzdp.thrift.ResultBizPlugin getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateTerminalUser();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("requestData", new requestData());
      processMap.put("validateTerminalUser", new validateTerminalUser());
      return processMap;
    }

    public static class requestData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestData_args> {
      public requestData() {
        super("requestData");
      }

      public requestData_args getEmptyArgsInstance() {
        return new requestData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestData_result getResult(I iface, requestData_args args) throws org.apache.thrift.TException {
        requestData_result result = new requestData_result();
        result.success = iface.requestData(args.reqParameter);
        return result;
      }
    }

    public static class validateTerminalUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateTerminalUser_args> {
      public validateTerminalUser() {
        super("validateTerminalUser");
      }

      public validateTerminalUser_args getEmptyArgsInstance() {
        return new validateTerminalUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validateTerminalUser_result getResult(I iface, validateTerminalUser_args args) throws org.apache.thrift.TException {
        validateTerminalUser_result result = new validateTerminalUser_result();
        result.success = iface.validateTerminalUser(args.bizSysID, args.terminalCode, args.userName, args.password);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("requestData", new requestData());
      processMap.put("validateTerminalUser", new validateTerminalUser());
      return processMap;
    }

    public static class requestData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestData_args, com.epsmart.wzdp.thrift.ResultBusinessData> {
      public requestData() {
        super("requestData");
      }

      public requestData_args getEmptyArgsInstance() {
        return new requestData_args();
      }

      public AsyncMethodCallback<com.epsmart.wzdp.thrift.ResultBusinessData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        @SuppressWarnings("rawtypes")
		final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.epsmart.wzdp.thrift.ResultBusinessData>() { 
          public void onComplete(com.epsmart.wzdp.thrift.ResultBusinessData o) {
            requestData_result result = new requestData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
//            requestData_result result = new requestData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestData_args args, org.apache.thrift.async.AsyncMethodCallback<com.epsmart.wzdp.thrift.ResultBusinessData> resultHandler) throws TException {
        iface.requestData(args.reqParameter,resultHandler);
      }
    }

    public static class validateTerminalUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validateTerminalUser_args, com.epsmart.wzdp.thrift.ResultBizPlugin> {
      public validateTerminalUser() {
        super("validateTerminalUser");
      }

      public validateTerminalUser_args getEmptyArgsInstance() {
        return new validateTerminalUser_args();
      }

      public AsyncMethodCallback<com.epsmart.wzdp.thrift.ResultBizPlugin> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.epsmart.wzdp.thrift.ResultBizPlugin>() { 
          public void onComplete(com.epsmart.wzdp.thrift.ResultBizPlugin o) {
            validateTerminalUser_result result = new validateTerminalUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          @SuppressWarnings("rawtypes")
		public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
//            validateTerminalUser_result result = new validateTerminalUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validateTerminalUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.epsmart.wzdp.thrift.ResultBizPlugin> resultHandler) throws TException {
        iface.validateTerminalUser(args.bizSysID, args.terminalCode, args.userName, args.password,resultHandler);
      }
    }

  }

  public static class requestData_args implements org.apache.thrift.TBase<requestData_args, requestData_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestData_args");

    private static final org.apache.thrift.protocol.TField REQ_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("reqParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestData_argsTupleSchemeFactory());
    }

    public com.epsmart.wzdp.thrift.ReqParameter reqParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_PARAMETER((short)1, "reqParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_PARAMETER
            return REQ_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("reqParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.epsmart.wzdp.thrift.ReqParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestData_args.class, metaDataMap);
    }

    public requestData_args() {
    }

    public requestData_args(
      com.epsmart.wzdp.thrift.ReqParameter reqParameter)
    {
      this();
      this.reqParameter = reqParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestData_args(requestData_args other) {
      if (other.isSetReqParameter()) {
        this.reqParameter = new com.epsmart.wzdp.thrift.ReqParameter(other.reqParameter);
      }
    }

    public requestData_args deepCopy() {
      return new requestData_args(this);
    }

    @Override
    public void clear() {
      this.reqParameter = null;
    }

    public com.epsmart.wzdp.thrift.ReqParameter getReqParameter() {
      return this.reqParameter;
    }

    public requestData_args setReqParameter(com.epsmart.wzdp.thrift.ReqParameter reqParameter) {
      this.reqParameter = reqParameter;
      return this;
    }

    public void unsetReqParameter() {
      this.reqParameter = null;
    }

    /** Returns true if field reqParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetReqParameter() {
      return this.reqParameter != null;
    }

    public void setReqParameterIsSet(boolean value) {
      if (!value) {
        this.reqParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_PARAMETER:
        if (value == null) {
          unsetReqParameter();
        } else {
          setReqParameter((com.epsmart.wzdp.thrift.ReqParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_PARAMETER:
        return getReqParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_PARAMETER:
        return isSetReqParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestData_args)
        return this.equals((requestData_args)that);
      return false;
    }

    public boolean equals(requestData_args that) {
      if (that == null)
        return false;

      boolean this_present_reqParameter = true && this.isSetReqParameter();
      boolean that_present_reqParameter = true && that.isSetReqParameter();
      if (this_present_reqParameter || that_present_reqParameter) {
        if (!(this_present_reqParameter && that_present_reqParameter))
          return false;
        if (!this.reqParameter.equals(that.reqParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(requestData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqParameter()).compareTo(other.isSetReqParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqParameter, other.reqParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestData_args(");
      boolean first = true;

      sb.append("reqParameter:");
      if (this.reqParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.reqParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqParameter != null) {
        reqParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestData_argsStandardSchemeFactory implements SchemeFactory {
      public requestData_argsStandardScheme getScheme() {
        return new requestData_argsStandardScheme();
      }
    }

    private static class requestData_argsStandardScheme extends StandardScheme<requestData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqParameter = new com.epsmart.wzdp.thrift.ReqParameter();
                struct.reqParameter.read(iprot);
                struct.setReqParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqParameter != null) {
          oprot.writeFieldBegin(REQ_PARAMETER_FIELD_DESC);
          struct.reqParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestData_argsTupleSchemeFactory implements SchemeFactory {
      public requestData_argsTupleScheme getScheme() {
        return new requestData_argsTupleScheme();
      }
    }

    private static class requestData_argsTupleScheme extends TupleScheme<requestData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqParameter()) {
          struct.reqParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqParameter = new com.epsmart.wzdp.thrift.ReqParameter();
          struct.reqParameter.read(iprot);
          struct.setReqParameterIsSet(true);
        }
      }
    }

  }

  public static class requestData_result implements org.apache.thrift.TBase<requestData_result, requestData_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestData_resultTupleSchemeFactory());
    }

    public com.epsmart.wzdp.thrift.ResultBusinessData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.epsmart.wzdp.thrift.ResultBusinessData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestData_result.class, metaDataMap);
    }

    public requestData_result() {
    }

    public requestData_result(
      com.epsmart.wzdp.thrift.ResultBusinessData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestData_result(requestData_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.epsmart.wzdp.thrift.ResultBusinessData(other.success);
      }
    }

    public requestData_result deepCopy() {
      return new requestData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.epsmart.wzdp.thrift.ResultBusinessData getSuccess() {
      return this.success;
    }

    public requestData_result setSuccess(com.epsmart.wzdp.thrift.ResultBusinessData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.epsmart.wzdp.thrift.ResultBusinessData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestData_result)
        return this.equals((requestData_result)that);
      return false;
    }

    public boolean equals(requestData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(requestData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestData_resultStandardSchemeFactory implements SchemeFactory {
      public requestData_resultStandardScheme getScheme() {
        return new requestData_resultStandardScheme();
      }
    }

    private static class requestData_resultStandardScheme extends StandardScheme<requestData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.epsmart.wzdp.thrift.ResultBusinessData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestData_resultTupleSchemeFactory implements SchemeFactory {
      public requestData_resultTupleScheme getScheme() {
        return new requestData_resultTupleScheme();
      }
    }

    private static class requestData_resultTupleScheme extends TupleScheme<requestData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.epsmart.wzdp.thrift.ResultBusinessData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class validateTerminalUser_args implements org.apache.thrift.TBase<validateTerminalUser_args, validateTerminalUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<validateTerminalUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateTerminalUser_args");

    private static final org.apache.thrift.protocol.TField BIZ_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bizSysID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TERMINAL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("terminalCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateTerminalUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateTerminalUser_argsTupleSchemeFactory());
    }

    public int bizSysID; // required
    public String terminalCode; // required
    public String userName; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_SYS_ID((short)1, "bizSysID"),
      TERMINAL_CODE((short)2, "terminalCode"),
      USER_NAME((short)3, "userName"),
      PASSWORD((short)4, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_SYS_ID
            return BIZ_SYS_ID;
          case 2: // TERMINAL_CODE
            return TERMINAL_CODE;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIZSYSID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("bizSysID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TERMINAL_CODE, new org.apache.thrift.meta_data.FieldMetaData("terminalCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateTerminalUser_args.class, metaDataMap);
    }

    public validateTerminalUser_args() {
    }

    public validateTerminalUser_args(
      int bizSysID,
      String terminalCode,
      String userName,
      String password)
    {
      this();
      this.bizSysID = bizSysID;
      setBizSysIDIsSet(true);
      this.terminalCode = terminalCode;
      this.userName = userName;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateTerminalUser_args(validateTerminalUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bizSysID = other.bizSysID;
      if (other.isSetTerminalCode()) {
        this.terminalCode = other.terminalCode;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public validateTerminalUser_args deepCopy() {
      return new validateTerminalUser_args(this);
    }

    @Override
    public void clear() {
      setBizSysIDIsSet(false);
      this.bizSysID = 0;
      this.terminalCode = null;
      this.userName = null;
      this.password = null;
    }

    public int getBizSysID() {
      return this.bizSysID;
    }

    public validateTerminalUser_args setBizSysID(int bizSysID) {
      this.bizSysID = bizSysID;
      setBizSysIDIsSet(true);
      return this;
    }

    public void unsetBizSysID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZSYSID_ISSET_ID);
    }

    /** Returns true if field bizSysID is set (has been assigned a value) and false otherwise */
    public boolean isSetBizSysID() {
      return EncodingUtils.testBit(__isset_bitfield, __BIZSYSID_ISSET_ID);
    }

    public void setBizSysIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZSYSID_ISSET_ID, value);
    }

    public String getTerminalCode() {
      return this.terminalCode;
    }

    public validateTerminalUser_args setTerminalCode(String terminalCode) {
      this.terminalCode = terminalCode;
      return this;
    }

    public void unsetTerminalCode() {
      this.terminalCode = null;
    }

    /** Returns true if field terminalCode is set (has been assigned a value) and false otherwise */
    public boolean isSetTerminalCode() {
      return this.terminalCode != null;
    }

    public void setTerminalCodeIsSet(boolean value) {
      if (!value) {
        this.terminalCode = null;
      }
    }

    public String getUserName() {
      return this.userName;
    }

    public validateTerminalUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public validateTerminalUser_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_SYS_ID:
        if (value == null) {
          unsetBizSysID();
        } else {
          setBizSysID((Integer)value);
        }
        break;

      case TERMINAL_CODE:
        if (value == null) {
          unsetTerminalCode();
        } else {
          setTerminalCode((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_SYS_ID:
        return Integer.valueOf(getBizSysID());

      case TERMINAL_CODE:
        return getTerminalCode();

      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_SYS_ID:
        return isSetBizSysID();
      case TERMINAL_CODE:
        return isSetTerminalCode();
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateTerminalUser_args)
        return this.equals((validateTerminalUser_args)that);
      return false;
    }

    public boolean equals(validateTerminalUser_args that) {
      if (that == null)
        return false;

      boolean this_present_bizSysID = true;
      boolean that_present_bizSysID = true;
      if (this_present_bizSysID || that_present_bizSysID) {
        if (!(this_present_bizSysID && that_present_bizSysID))
          return false;
        if (this.bizSysID != that.bizSysID)
          return false;
      }

      boolean this_present_terminalCode = true && this.isSetTerminalCode();
      boolean that_present_terminalCode = true && that.isSetTerminalCode();
      if (this_present_terminalCode || that_present_terminalCode) {
        if (!(this_present_terminalCode && that_present_terminalCode))
          return false;
        if (!this.terminalCode.equals(that.terminalCode))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(validateTerminalUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizSysID()).compareTo(other.isSetBizSysID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizSysID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizSysID, other.bizSysID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTerminalCode()).compareTo(other.isSetTerminalCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTerminalCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terminalCode, other.terminalCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateTerminalUser_args(");
      boolean first = true;

      sb.append("bizSysID:");
      sb.append(this.bizSysID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("terminalCode:");
      if (this.terminalCode == null) {
        sb.append("null");
      } else {
        sb.append(this.terminalCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateTerminalUser_argsStandardSchemeFactory implements SchemeFactory {
      public validateTerminalUser_argsStandardScheme getScheme() {
        return new validateTerminalUser_argsStandardScheme();
      }
    }

    private static class validateTerminalUser_argsStandardScheme extends StandardScheme<validateTerminalUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateTerminalUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_SYS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bizSysID = iprot.readI32();
                struct.setBizSysIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TERMINAL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.terminalCode = iprot.readString();
                struct.setTerminalCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateTerminalUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIZ_SYS_ID_FIELD_DESC);
        oprot.writeI32(struct.bizSysID);
        oprot.writeFieldEnd();
        if (struct.terminalCode != null) {
          oprot.writeFieldBegin(TERMINAL_CODE_FIELD_DESC);
          oprot.writeString(struct.terminalCode);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateTerminalUser_argsTupleSchemeFactory implements SchemeFactory {
      public validateTerminalUser_argsTupleScheme getScheme() {
        return new validateTerminalUser_argsTupleScheme();
      }
    }

    private static class validateTerminalUser_argsTupleScheme extends TupleScheme<validateTerminalUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateTerminalUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizSysID()) {
          optionals.set(0);
        }
        if (struct.isSetTerminalCode()) {
          optionals.set(1);
        }
        if (struct.isSetUserName()) {
          optionals.set(2);
        }
        if (struct.isSetPassword()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBizSysID()) {
          oprot.writeI32(struct.bizSysID);
        }
        if (struct.isSetTerminalCode()) {
          oprot.writeString(struct.terminalCode);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateTerminalUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bizSysID = iprot.readI32();
          struct.setBizSysIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.terminalCode = iprot.readString();
          struct.setTerminalCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class validateTerminalUser_result implements org.apache.thrift.TBase<validateTerminalUser_result, validateTerminalUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<validateTerminalUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateTerminalUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateTerminalUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateTerminalUser_resultTupleSchemeFactory());
    }

    public com.epsmart.wzdp.thrift.ResultBizPlugin success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.epsmart.wzdp.thrift.ResultBizPlugin.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateTerminalUser_result.class, metaDataMap);
    }

    public validateTerminalUser_result() {
    }

    public validateTerminalUser_result(
      com.epsmart.wzdp.thrift.ResultBizPlugin success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateTerminalUser_result(validateTerminalUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.epsmart.wzdp.thrift.ResultBizPlugin(other.success);
      }
    }

    public validateTerminalUser_result deepCopy() {
      return new validateTerminalUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.epsmart.wzdp.thrift.ResultBizPlugin getSuccess() {
      return this.success;
    }

    public validateTerminalUser_result setSuccess(com.epsmart.wzdp.thrift.ResultBizPlugin success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.epsmart.wzdp.thrift.ResultBizPlugin)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateTerminalUser_result)
        return this.equals((validateTerminalUser_result)that);
      return false;
    }

    public boolean equals(validateTerminalUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(validateTerminalUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateTerminalUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateTerminalUser_resultStandardSchemeFactory implements SchemeFactory {
      public validateTerminalUser_resultStandardScheme getScheme() {
        return new validateTerminalUser_resultStandardScheme();
      }
    }

    private static class validateTerminalUser_resultStandardScheme extends StandardScheme<validateTerminalUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateTerminalUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.epsmart.wzdp.thrift.ResultBizPlugin();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateTerminalUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateTerminalUser_resultTupleSchemeFactory implements SchemeFactory {
      public validateTerminalUser_resultTupleScheme getScheme() {
        return new validateTerminalUser_resultTupleScheme();
      }
    }

    private static class validateTerminalUser_resultTupleScheme extends TupleScheme<validateTerminalUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateTerminalUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateTerminalUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.epsmart.wzdp.thrift.ResultBizPlugin();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
